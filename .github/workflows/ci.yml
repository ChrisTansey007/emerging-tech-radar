name: Python CI

on:
  push:
    branches: [ main, master, development ] # Adjust as per your main branches, e.g. main
  pull_request:
    branches: [ main, master, development ] # Adjust as per your main branches, e.g. main

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Allow all matrix jobs to complete even if one fails
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # Updated to v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5 # Updated to v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r innovation_system/requirements.txt
        pip install -e . # Add this line
        # Optional: Pre-download NLTK resources if tests might need them and can't download in CI
        # This assumes tests that use NLTK are robust enough to handle missing resources or you pre-populate
        # For a CI environment, explicitly downloading is often better if tests rely on them:
        python -c "import nltk; nltk.download('punkt', quiet=True); nltk.download('stopwords', quiet=True)"


    - name: Lint with Flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 innovation_system/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings.
        # The GitHub editor is 127 chars wide by default for Flake8.
        flake8 innovation_system/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics # Adjusted max-line-length

    - name: Test with Pytest and Generate Coverage
      run: |
        # Run tests from the project root if they are structured to be discovered from there
        # and if imports within innovation_system work correctly when CWD is root.
        # Or, cd into innovation_system if tests are relative to it.
        # Assuming tests are in innovation_system/tests and innovation_system is on PYTHONPATH
        # Pytest will typically find tests in innovation_system/tests if run from root.
        # The main challenge is usually Python's import system if innovation_system isn't installed as a package.
        # For simplicity, let's assume running pytest from root and it finds the tests.
        # If `innovation_system` is not installed, PYTHONPATH might need adjustment for imports to work.
        # A common way to handle this is to install the package in editable mode:
        # pip install -e .  (if innovation_system has a setup.py/pyproject.toml for the package)
        # For now, let's try direct pytest call from root.

        # The previous subtask for tests created tests/test_predictor_data_prep.py inside innovation_system
        # So, we should be able to run pytest directly on that subdirectory.
        coverage run -m pytest innovation_system/tests/
        coverage report -m --fail-under=60 # Adjusted coverage threshold example
```
